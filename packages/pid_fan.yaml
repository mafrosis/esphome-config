# https://github.com/patrickcollins12/esphome-fan-controller
---
sensor:
  # https://esphome.io/components/sensor/pulse_counter.html
  - platform: pulse_counter
    pin:
      number: $tach_pin
      inverted: true
      mode:
        input: true
        pullup: true
    unit_of_measurement: RPM
    name: $room Fan Speed
    filters:
      - multiply: 0.5  # how many pulses the fan sends per round - should be 0.5 or 1

  # https://esphome.io/components/climate/pid.html
  - platform: pid
    name: $room Fan Speed (PWM Voltage)
    climate_id: pid_thermostat
    type: HEAT

  - platform: template
    name: $room PID kp
    id: p_term
    unit_of_measurement: "%"

  - platform: template
    name: $room PID ki
    id: i_term
    unit_of_measurement: "%"

  - platform: template
    name: $room PID kd
    id: d_term
    unit_of_measurement: "%"

  - platform: template
    name: $room PID output value
    id: pid_output
    unit_of_measurement: "%"


# https://esphome.io/components/number/template
number:
  - platform: template
    name: $room PID kp
    min_value: 0
    max_value: 50
    step: 0.001
    initial_value: 0.3
    restore_value: true
    set_action:
      lambda: id(pid_thermostat).set_kp( x );

  - platform: template
    name: $room PID ki
    min_value: 0
    max_value: 50
    step: 0.001
    initial_value: 0.001
    restore_value: true
    set_action:
      lambda: id(pid_thermostat).set_ki( x );

  - platform: template
    name: $room Deadband Threshold Low
    min_value: -20
    max_value: 0
    step: 0.1
    initial_value: -1.0
    restore_value: true
    set_action:
      lambda: id(pid_thermostat).set_threshold_low( x );

  - platform: template
    name: $room Deadband Threshold High
    min_value: 0
    max_value: 20
    step: 0.1
    initial_value: 0.4
    restore_value: true
    set_action:
      lambda: id(pid_thermostat).set_threshold_high( x );


output:
  # https://esphome.io/components/output/ledc.html
  - platform: ledc
    id: fan_speed
    pin: $pwm_pin
    frequency: 25000Hz
    max_power: 10%


# https://esphome.io/components/climate/index.html
# https://esphome.io/components/climate/pid.html
climate:
  - platform: pid
    name: $room PID Thermostat
    id: pid_thermostat
    sensor: ble_sensor_2

    heat_output: fan_speed
    default_target_temperature: 120

    # ON state change, publish the values to the PID x_term numbers, so they appear in HA
    on_state:
      - sensor.template.publish:
          id: p_term
          state: !lambda 'return -id(pid_thermostat).get_proportional_term() * 100.0;'
      - sensor.template.publish:
          id: i_term
          state: !lambda 'return -id(pid_thermostat).get_integral_term() * 100.0;'
      - sensor.template.publish:
          id: d_term
          state: !lambda 'return -id(pid_thermostat).get_derivative_term() * 100.0;'
      - sensor.template.publish:
          id: pid_output
          state: !lambda 'return -id(pid_thermostat).get_output_value() * 100.0;'

    # Configure the climate component UI in HA
    visual:
      min_temperature: 10
      max_temperature: 150
      temperature_step:
        target_temperature: 5
        current_temperature: 0.1

    # PID tuning
    # https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller#Loop_tuning
    control_parameters:
      kp: 0.3
      ki: 0
      kd: 0
      output_averaging_samples: 5

    # Create a no-op band around the target temperature
    # High threshold not relevant here as there is no cooling capability in this setup
    deadband_parameters:
      threshold_high: 2.0
      threshold_low: -2.0
      ki_multiplier: 0.05
      deadband_output_averaging_samples: 15
